// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CiPlotChannelX wrapper class

class CiPlotChannelX : public COleDispatchDriver
{
public:
	CiPlotChannelX() {}		// Calls COleDispatchDriver default constructor
	CiPlotChannelX(LPDISPATCH pDispatch) : COleDispatchDriver(pDispatch) {}
	CiPlotChannelX(const CiPlotChannelX& dispatchSrc) : COleDispatchDriver(dispatchSrc) {}

// Attributes
public:

// Operations
public:
	CString GetName();
	void SetName(LPCTSTR lpszNewValue);
	BOOL GetVisible();
	void SetVisible(BOOL bNewValue);
	CString GetTitleText();
	void SetTitleText(LPCTSTR lpszNewValue);
	unsigned long GetColor();
	void SetColor(unsigned long newValue);
	BOOL GetVisibleInLegend();
	void SetVisibleInLegend(BOOL bNewValue);
	long GetRingBufferSize();
	void SetRingBufferSize(long nNewValue);
	BOOL GetTraceVisible();
	void SetTraceVisible(BOOL bNewValue);
	long GetTraceLineStyle();
	void SetTraceLineStyle(long nNewValue);
	long GetTraceLineWidth();
	void SetTraceLineWidth(long nNewValue);
	BOOL GetMarkersVisible();
	void SetMarkersVisible(BOOL bNewValue);
	long GetMarkersSize();
	void SetMarkersSize(long nNewValue);
	long GetMarkersStyle();
	void SetMarkersStyle(long nNewValue);
	unsigned long GetMarkersPenColor();
	void SetMarkersPenColor(unsigned long newValue);
	BOOL GetMarkersPenUseChannelColor();
	void SetMarkersPenUseChannelColor(BOOL bNewValue);
	long GetMarkersPenStyle();
	void SetMarkersPenStyle(long nNewValue);
	long GetMarkersPenWidth();
	void SetMarkersPenWidth(long nNewValue);
	unsigned long GetMarkersBrushColor();
	void SetMarkersBrushColor(unsigned long newValue);
	BOOL GetMarkersBrushUseChannelColor();
	void SetMarkersBrushUseChannelColor(BOOL bNewValue);
	long GetMarkersBrushStyle();
	void SetMarkersBrushStyle(long nNewValue);
	CString GetXAxisName();
	void SetXAxisName(LPCTSTR lpszNewValue);
	CString GetYAxisName();
	void SetYAxisName(LPCTSTR lpszNewValue);
	BOOL GetXAxisTrackingEnabled();
	void SetXAxisTrackingEnabled(BOOL bNewValue);
	BOOL GetYAxisTrackingEnabled();
	void SetYAxisTrackingEnabled(BOOL bNewValue);
	long GetCount();
	void SetCount(long nNewValue);
	double GetDataX(long Index);
	void SetDataX(long Index, double newValue);
	double GetDataY(long Index);
	void SetDataY(long Index, double newValue);
	BOOL GetDataNull(long Index);
	void SetDataNull(long Index, BOOL bNewValue);
	long AddXY(double X, double Y);
	void Clear();
	void SavePropertiesToFile(LPCTSTR FileName);
	void LoadPropertiesFromFile(LPCTSTR FileName);
	void SaveDataToFile(LPCTSTR FileName);
	void LoadDataFromFile(LPCTSTR FileName, BOOL ClearPreviousData);
	void LogActivate(BOOL Append);
	void LogDeactivate();
	CString GetLogFileName();
	void SetLogFileName(LPCTSTR lpszNewValue);
	long GetLogBufferSize();
	void SetLogBufferSize(long nNewValue);
	BOOL GetLoggingActive();
	double GetXMin();
	double GetXMax();
	double GetXMean();
	double GetYMin();
	double GetYMax();
	double GetYMean();
	BOOL GetDataMarkerShow(long Index);
	void SetDataMarkerShow(long Index, BOOL bNewValue);
	long GetDataMarkerStyle(long Index);
	void SetDataMarkerStyle(long Index, long nNewValue);
	BOOL GetMarkersAllowIndividual();
	void SetMarkersAllowIndividual(BOOL bNewValue);
	BOOL GetEnabled();
	void SetEnabled(BOOL bNewValue);
	BOOL GetPopupEnabled();
	void SetPopupEnabled(BOOL bNewValue);
	void AddXYArrays(const VARIANT& XData, const VARIANT& YData);
	VARIANT GetTag();
	void SetTag(const VARIANT& newValue);
	BOOL GetDataEmpty(long Index);
	void SetDataEmpty(long Index, BOOL bNewValue);
	BOOL GetFillEnabled();
	void SetFillEnabled(BOOL bNewValue);
	double GetFillReference();
	void SetFillReference(double newValue);
	long GetFillStyle();
	void SetFillStyle(long nNewValue);
	unsigned long GetFillColor();
	void SetFillColor(unsigned long newValue);
	BOOL GetFillUseChannelColor();
	void SetFillUseChannelColor(BOOL bNewValue);
	double GetElapsedStartTime();
	void SetElapsedStartTime(double newValue);
	BOOL GetYInterpolated(double XValue, double* YValue);
	long AddXNull(double X);
	long AddYNow(double Y);
	long AddYElapsedTime(double Y);
	void ResetElapsedStartTime();
	long AddYElapsedSeconds(double Y);
	BOOL GetDigitalEnabled();
	void SetDigitalEnabled(BOOL bNewValue);
	long GetDigitalReferenceStyle();
	void SetDigitalReferenceStyle(long nNewValue);
	double GetDigitalReferenceLow();
	void SetDigitalReferenceLow(double newValue);
	double GetDigitalReferenceHigh();
	void SetDigitalReferenceHigh(double newValue);
	void AddYArray(double XInterval, const VARIANT& YData);
	BOOL GetFastDrawEnabled();
	void SetFastDrawEnabled(BOOL bNewValue);
	long AddXEmpty(double X);
};
